{"ast":null,"code":"var _jsxFileName = \"/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/src/components/FetchButton.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FetchButton(props) {\n  _s();\n  // access the settings that will be used to construct the API query\n  const questionCategory = useSelector(state => state.options.question_category);\n  const questionIndex = useSelector(state => state.index);\n  const dispatch = useDispatch();\n  const setLoading = value => {\n    dispatch({\n      type: 'CHANGE_LOADING',\n      loading: value\n    });\n  };\n  const setQuestions = value => {\n    dispatch({\n      type: 'SET_QUESTIONS',\n      questions: value\n    });\n  };\n  const handleQuery = async () => {\n    // we always need to specify the number of questions that we\n    // want to be returned\n    let apiUrl = `https://opentdb.com/api.php?amount=10`;\n    // only add the rest of the parameters if they aren't 'all'\n    if (questionCategory.length) {\n      apiUrl = apiUrl.concat(`&category=${questionCategory}`);\n    }\n    await fetch(apiUrl).then(res => res.json()).then(response => {\n      // this is where we will set questions in the state using an action\n    });\n    setLoading(true);\n    await fetch(apiUrl).then(res => res.json()).then(response => {\n      setQuestions(response.results);\n      setLoading(false);\n    });\n  };\n  // we will resuse this component, so the button text will be passed as props\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleQuery,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 10\n  }, this);\n}\n_s(FetchButton, \"2UDApUku8WJh8U1UeQhs7YwEgAs=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = FetchButton;\nexport default FetchButton;\nvar _c;\n$RefreshReg$(_c, \"FetchButton\");","map":{"version":3,"names":["React","useSelector","useDispatch","FetchButton","props","questionCategory","state","options","question_category","questionIndex","index","dispatch","setLoading","value","type","loading","setQuestions","questions","handleQuery","apiUrl","length","concat","fetch","then","res","json","response","results","text"],"sources":["/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/src/components/FetchButton.js"],"sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction FetchButton(props) {\n\t// access the settings that will be used to construct the API query\n  const questionCategory = useSelector(state => state.options.question_category)\n  const questionIndex = useSelector(state => state.index)\n\t\n  const dispatch = useDispatch()\n  const setLoading = value => {\n    dispatch({\n      type: 'CHANGE_LOADING',\n      loading: value\n    })\n  }\n  const setQuestions = value => {\n    dispatch({\n      type: 'SET_QUESTIONS',\n      questions: value\n    })\n  }\n\n  const handleQuery = async () => {\n\t\t// we always need to specify the number of questions that we\n\t\t// want to be returned\n    let apiUrl = `https://opentdb.com/api.php?amount=10`;\n\t\t// only add the rest of the parameters if they aren't 'all'\n    if (questionCategory.length) {\n      apiUrl = apiUrl.concat(`&category=${questionCategory}`)\n    }\n    await fetch(apiUrl)\n      .then((res) => res.json())\n      .then((response) => {\n        // this is where we will set questions in the state using an action\n      });\n\n    setLoading(true);\n    await fetch(apiUrl)\n    .then((res) => res.json())\n    .then((response) => {\n        setQuestions(response.results)\n        setLoading(false);\n    });\n  }\n\t// we will resuse this component, so the button text will be passed as props\n  return <button onClick={handleQuery}>{props.text}</button>;\n}\nexport default FetchButton;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAAC;AAEvD,SAASC,WAAW,CAACC,KAAK,EAAE;EAAA;EAC3B;EACC,MAAMC,gBAAgB,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACC,iBAAiB,CAAC;EAC9E,MAAMC,aAAa,GAAGR,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACI,KAAK,CAAC;EAEvD,MAAMC,QAAQ,GAAGT,WAAW,EAAE;EAC9B,MAAMU,UAAU,GAAGC,KAAK,IAAI;IAC1BF,QAAQ,CAAC;MACPG,IAAI,EAAE,gBAAgB;MACtBC,OAAO,EAAEF;IACX,CAAC,CAAC;EACJ,CAAC;EACD,MAAMG,YAAY,GAAGH,KAAK,IAAI;IAC5BF,QAAQ,CAAC;MACPG,IAAI,EAAE,eAAe;MACrBG,SAAS,EAAEJ;IACb,CAAC,CAAC;EACJ,CAAC;EAED,MAAMK,WAAW,GAAG,YAAY;IAChC;IACA;IACE,IAAIC,MAAM,GAAI,uCAAsC;IACtD;IACE,IAAId,gBAAgB,CAACe,MAAM,EAAE;MAC3BD,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAE,aAAYhB,gBAAiB,EAAC,CAAC;IACzD;IACA,MAAMiB,KAAK,CAACH,MAAM,CAAC,CAChBI,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,QAAQ,IAAK;MAClB;IAAA,CACD,CAAC;IAEJd,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMU,KAAK,CAACH,MAAM,CAAC,CAClBI,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,QAAQ,IAAK;MAChBV,YAAY,CAACU,QAAQ,CAACC,OAAO,CAAC;MAC9Bf,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC;EACF;EACC,oBAAO;IAAQ,OAAO,EAAEM,WAAY;IAAA,UAAEd,KAAK,CAACwB;EAAI;IAAA;IAAA;IAAA;EAAA,QAAU;AAC5D;AAAC,GA3CQzB,WAAW;EAAA,QAEOF,WAAW,EACdA,WAAW,EAEhBC,WAAW;AAAA;AAAA,KALrBC,WAAW;AA4CpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}