{"ast":null,"code":"import _regeneratorRuntime from\"/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import React from'react';import{useSelector,useDispatch}from'react-redux';import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";function FetchButton(props){var navigate=useNavigate();// access the settings that will be used to construct the API query\nvar questionCategory=useSelector(function(state){return state.options.question_category;});// const questionIndex = useSelector(state => state.index)\nvar dispatch=useDispatch();var setLoading=function setLoading(value){dispatch({type:'CHANGE_LOADING',loading:value});};var setQuestions=function setQuestions(value){dispatch({type:'SET_QUESTIONS',questions:value});};var handleQuery=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var apiUrl;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// we always need to specify the number of questions that we\n// want to be returned\napiUrl=\"https://opentdb.com/api.php?amount=10\";// only add the rest of the parameters if they aren't 'all'\nif(questionCategory.length){apiUrl=apiUrl.concat(\"&category=\".concat(questionCategory));}setLoading(true);_context.next=5;return fetch(apiUrl).then(function(res){return res.json();}).then(function(response){setQuestions(response.results);setLoading(false);});case 5:// if (questionIndex > 0) {\ndispatch({type:'SET_INDEX',index:0});dispatch({type:'SET_SCORE',score:0});navigate('/quiz');case 8:case\"end\":return _context.stop();}}},_callee);}));return function handleQuery(){return _ref.apply(this,arguments);};}();// we will resuse this component, so the button text will be passed as props\nreturn/*#__PURE__*/_jsx(\"button\",{onClick:handleQuery,className:\"btn\",children:props.text});}export default FetchButton;","map":{"version":3,"names":["React","useSelector","useDispatch","useNavigate","FetchButton","props","navigate","questionCategory","state","options","question_category","dispatch","setLoading","value","type","loading","setQuestions","questions","handleQuery","apiUrl","length","concat","fetch","then","res","json","response","results","index","score","text"],"sources":["/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/src/components/FetchButton.js"],"sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction FetchButton(props) {\n  const navigate = useNavigate();\n\t// access the settings that will be used to construct the API query\n  const questionCategory = useSelector(state => state.options.question_category)\n  // const questionIndex = useSelector(state => state.index)\n\t\n  const dispatch = useDispatch()\n\n  const setLoading = value => {\n    dispatch({\n      type: 'CHANGE_LOADING',\n      loading: value\n    })\n  }\n  const setQuestions = value => {\n    dispatch({\n      type: 'SET_QUESTIONS',\n      questions: value\n    })\n  }\n\n  const handleQuery = async () => {\n\t\t// we always need to specify the number of questions that we\n\t\t// want to be returned\n    let apiUrl = `https://opentdb.com/api.php?amount=10`;\n\t\t// only add the rest of the parameters if they aren't 'all'\n    if (questionCategory.length) {\n      apiUrl = apiUrl.concat(`&category=${questionCategory}`)\n    }\n\n    setLoading(true);\n\n    await fetch(apiUrl)\n    .then((res) => res.json())\n    .then((response) => {\n        setQuestions(response.results)\n        setLoading(false);\n    });\n\n    // if (questionIndex > 0) {\n      dispatch({\n        type: 'SET_INDEX',\n        index: 0,\n      })\n\n      dispatch({\n        type: 'SET_SCORE',\n        score: 0,\n      })\n\n    navigate('/quiz');\n  }\n\t// we will resuse this component, so the button text will be passed as props\n  return <button onClick={handleQuery} className='btn'>{props.text}</button>;\n}\nexport default FetchButton;"],"mappings":"oTAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,WAAW,KAAQ,kBAAkB,CAAC,2CAG/C,QAASC,YAAW,CAACC,KAAK,CAAE,CAC1B,GAAMC,SAAQ,CAAGH,WAAW,EAAE,CAC/B;AACC,GAAMI,iBAAgB,CAAGN,WAAW,CAAC,SAAAO,KAAK,QAAIA,MAAK,CAACC,OAAO,CAACC,iBAAiB,GAAC,CAC9E;AAEA,GAAMC,SAAQ,CAAGT,WAAW,EAAE,CAE9B,GAAMU,WAAU,CAAG,QAAbA,WAAU,CAAGC,KAAK,CAAI,CAC1BF,QAAQ,CAAC,CACPG,IAAI,CAAE,gBAAgB,CACtBC,OAAO,CAAEF,KACX,CAAC,CAAC,CACJ,CAAC,CACD,GAAMG,aAAY,CAAG,QAAfA,aAAY,CAAGH,KAAK,CAAI,CAC5BF,QAAQ,CAAC,CACPG,IAAI,CAAE,eAAe,CACrBG,SAAS,CAAEJ,KACb,CAAC,CAAC,CACJ,CAAC,CAED,GAAMK,YAAW,4FAAG,gJACpB;AACA;AACMC,MAAM,yCACZ;AACE,GAAIZ,gBAAgB,CAACa,MAAM,CAAE,CAC3BD,MAAM,CAAGA,MAAM,CAACE,MAAM,qBAAcd,gBAAgB,EAAG,CACzD,CAEAK,UAAU,CAAC,IAAI,CAAC,CAAC,sBAEXU,MAAK,CAACH,MAAM,CAAC,CAClBI,IAAI,CAAC,SAACC,GAAG,QAAKA,IAAG,CAACC,IAAI,EAAE,GAAC,CACzBF,IAAI,CAAC,SAACG,QAAQ,CAAK,CAChBV,YAAY,CAACU,QAAQ,CAACC,OAAO,CAAC,CAC9Bf,UAAU,CAAC,KAAK,CAAC,CACrB,CAAC,CAAC,QAEF;AACED,QAAQ,CAAC,CACPG,IAAI,CAAE,WAAW,CACjBc,KAAK,CAAE,CACT,CAAC,CAAC,CAEFjB,QAAQ,CAAC,CACPG,IAAI,CAAE,WAAW,CACjBe,KAAK,CAAE,CACT,CAAC,CAAC,CAEJvB,QAAQ,CAAC,OAAO,CAAC,CAAC,sDACnB,kBA9BKY,YAAW,0CA8BhB,CACF;AACC,mBAAO,eAAQ,OAAO,CAAEA,WAAY,CAAC,SAAS,CAAC,KAAK,UAAEb,KAAK,CAACyB,IAAI,EAAU,CAC5E,CACA,cAAe1B,YAAW"},"metadata":{},"sourceType":"module"}