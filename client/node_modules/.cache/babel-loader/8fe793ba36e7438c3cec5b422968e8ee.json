{"ast":null,"code":"var _jsxFileName = \"/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/src/components/Quiz.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = _ref => {\n  _s();\n  let {\n    route,\n    navigation\n  } = _ref;\n  const location = useLocation();\n  console.log(location.state.category);\n\n  // const navigate = useNavigate();\n  // navigate('/quiz');\n  const [category, setCategory] = useState('');\n  const [questionList, setQuestionList] = useState([]);\n  const [score, setScore] = useState(0);\n  const [current, setCurrent] = useState(null);\n  const [live, setLive] = useState(false);\n\n  //calls question from api    \n  const getQuestions = useCallback(async () => {\n    const r = await fetch(`https://opentdb.com/api.php?amount=10&category=${category}&difficulty=easy&type=multiple`);\n    const response = await r.json();\n    console.log(response);\n    setQuestionList(response.results);\n    return questionList;\n  }, []);\n  //get questions at game start\n  useEffect(() => {\n    getQuestions();\n  }, [getQuestions]);\n\n  //if correct answer is clicked, add to score\n  const send = clicked => {\n    if (current.correct_answer === clicked) {\n      setScore(score + 1);\n    }\n    setLive(false);\n  };\n  //get current question, randomize answers for sending to card\n  const generateTriviaCard = () => {};\n  //populate current question & update question list if necessary\n  const getCurrent = async () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Quiz\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(Quiz, \"HZRmBX9iJ0auJiaJC1pMUYIVcR8=\", false, function () {\n  return [useLocation];\n});\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["useState","useEffect","useCallback","useNavigate","useLocation","Quiz","route","navigation","location","console","log","state","category","setCategory","questionList","setQuestionList","score","setScore","current","setCurrent","live","setLive","getQuestions","r","fetch","response","json","results","send","clicked","correct_answer","generateTriviaCard","getCurrent"],"sources":["/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/src/components/Quiz.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nconst Quiz = ({ route, navigation }) => {\n    const location = useLocation();\n    console.log(location.state.category);\n\n    // const navigate = useNavigate();\n    // navigate('/quiz');\n    const [category, setCategory] = useState('');\n    const [questionList, setQuestionList] = useState([]);\n    const [score, setScore] = useState(0);\n    const [current, setCurrent] = useState(null);\n    const [live, setLive] = useState(false);\n\n//calls question from api    \n    const getQuestions = useCallback(async () => {\n        const r = await fetch(`https://opentdb.com/api.php?amount=10&category=${category}&difficulty=easy&type=multiple`)\n\n        const response = await r.json();\n        console.log(response);\n        setQuestionList(response.results);\n        return questionList;\n    }, [])\n//get questions at game start\n    useEffect(() => {\n        getQuestions()\n    }, [getQuestions])\n\n//if correct answer is clicked, add to score\n    const send = clicked => {\n        if (current.correct_answer === clicked){\n            setScore(score + 1)\n        }\n        setLive(false)\n    }\n    //get current question, randomize answers for sending to card\n    const generateTriviaCard = () => {\n        \n    }\n    //populate current question & update question list if necessary\n    const getCurrent = async () => {\n        \n    }\n\n    return (\n        <div>Quiz</div>\n    )\n\n};\n\nexport default Quiz;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAAC;AAE5D,MAAMC,IAAI,GAAG,QAA2B;EAAA;EAAA,IAA1B;IAAEC,KAAK;IAAEC;EAAW,CAAC;EAC/B,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9BK,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,KAAK,CAACC,QAAQ,CAAC;;EAEpC;EACA;EACA,MAAM,CAACA,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACI,MAAMsB,YAAY,GAAGpB,WAAW,CAAC,YAAY;IACzC,MAAMqB,CAAC,GAAG,MAAMC,KAAK,CAAE,kDAAiDZ,QAAS,gCAA+B,CAAC;IAEjH,MAAMa,QAAQ,GAAG,MAAMF,CAAC,CAACG,IAAI,EAAE;IAC/BjB,OAAO,CAACC,GAAG,CAACe,QAAQ,CAAC;IACrBV,eAAe,CAACU,QAAQ,CAACE,OAAO,CAAC;IACjC,OAAOb,YAAY;EACvB,CAAC,EAAE,EAAE,CAAC;EACV;EACIb,SAAS,CAAC,MAAM;IACZqB,YAAY,EAAE;EAClB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAEtB;EACI,MAAMM,IAAI,GAAGC,OAAO,IAAI;IACpB,IAAIX,OAAO,CAACY,cAAc,KAAKD,OAAO,EAAC;MACnCZ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACvB;IACAK,OAAO,CAAC,KAAK,CAAC;EAClB,CAAC;EACD;EACA,MAAMU,kBAAkB,GAAG,MAAM,CAEjC,CAAC;EACD;EACA,MAAMC,UAAU,GAAG,YAAY,CAE/B,CAAC;EAED,oBACI;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAe;AAGvB,CAAC;AAAC,GA9CI3B,IAAI;EAAA,QACWD,WAAW;AAAA;AAAA,KAD1BC,IAAI;AAgDV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}