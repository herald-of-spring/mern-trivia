{"ast":null,"code":"import _regeneratorRuntime from\"/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect,useCallback}from\"react\";import{useNavigate,useLocation}from\"react-router-dom\";import API from\"./API\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Quiz=function Quiz(props){var location=useLocation();var categoryId=location.state.categoryId;console.log(categoryId);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),questionList=_useState2[0],setQuestionList=_useState2[1];// const [score, setScore] = useState(0);\nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),current=_useState4[0],setCurrent=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),currentQuestion=_useState6[0],setCurrentQuestion=_useState6[1];var _useState7=useState([1,2,3]),_useState8=_slicedToArray(_useState7,2),answerChoices=_useState8[0],setAnswerChoices=_useState8[1];// const [live, setLive] = useState(false);\n//calls question from api    \n// const getQuestions = useCallback(async () => {\n//     const r = await fetch(`https://opentdb.com/api.php?amount=10&category=${categoryId}&difficulty=easy&type=multiple`)\n//     const response = await r.json();\n//     console.log(response);\n//     const results = response.results\n//     console.log(results);\n//     await setQuestionList(results);\n//     return questionList;\n// }, [])\n//get questions at game start\nuseEffect(function(){var list=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var listOfQuestions;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return API(categoryId);case 2:listOfQuestions=_context.sent;console.log(listOfQuestions);return _context.abrupt(\"return\",listOfQuestions);case 5:case\"end\":return _context.stop();}}},_callee);}));return function list(){return _ref.apply(this,arguments);};}();var listOfQuestions=list();setQuestionList(listOfQuestions);console.log(questionList);return questionList;},[]);//if correct answer is clicked, add to score\n// const send = clicked => {\n//     if (current.correct_answer === clicked){\n//         setScore(score + 1)\n//     }\n//     setLive(false)\n// }\n//get current question, randomize answers for sending to card\nvar generateTriviaCard=function generateTriviaCard(){};//populate current question & update question list if necessary\nvar getCurrent=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",console.log(questionList));case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function getCurrent(){return _ref2.apply(this,arguments);};}();// setCurrentQuestion(questionList[current].question);\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsx(\"div\",{children:currentQuestion})})]});};export default Quiz;","map":{"version":3,"names":["useState","useEffect","useCallback","useNavigate","useLocation","API","Quiz","props","location","categoryId","state","console","log","questionList","setQuestionList","current","setCurrent","currentQuestion","setCurrentQuestion","answerChoices","setAnswerChoices","list","listOfQuestions","generateTriviaCard","getCurrent"],"sources":["/Users/abe/Documents/00 Berkeley Bootcamp/mern-trivia/client/src/components/Quiz.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport API from \"./API\";\n\nconst Quiz = props => {\n    const location = useLocation();\n    const categoryId = location.state.categoryId;\n    console.log(categoryId);\n\n    const [questionList, setQuestionList] = useState([]);\n    // const [score, setScore] = useState(0);\n    const [current, setCurrent] = useState(0);\n    const [currentQuestion, setCurrentQuestion] = useState('');\n    const [answerChoices, setAnswerChoices] = useState([1,2,3]);\n    // const [live, setLive] = useState(false);\n\n//calls question from api    \n    // const getQuestions = useCallback(async () => {\n    //     const r = await fetch(`https://opentdb.com/api.php?amount=10&category=${categoryId}&difficulty=easy&type=multiple`)\n\n    //     const response = await r.json();\n    //     console.log(response);\n    //     const results = response.results\n    //     console.log(results);\n    //     await setQuestionList(results);\n    //     return questionList;\n    // }, [])\n//get questions at game start\n    useEffect(() => {\n        const list = async () => {\n            const listOfQuestions = await API(categoryId);\n            console.log(listOfQuestions);\n            return listOfQuestions;\n        }\n        const listOfQuestions = list();\n        setQuestionList(listOfQuestions);\n        console.log(questionList);\n        return questionList\n\n    }, [])\n\n//if correct answer is clicked, add to score\n    // const send = clicked => {\n    //     if (current.correct_answer === clicked){\n    //         setScore(score + 1)\n    //     }\n    //     setLive(false)\n    // }\n    //get current question, randomize answers for sending to card\n    const generateTriviaCard = () => {\n        \n    }\n    //populate current question & update question list if necessary\n    const getCurrent = async () => {\n        return console.log(questionList);\n    }\n    \n    // setCurrentQuestion(questionList[current].question);\n\n    return (\n        <>\n            <div></div>\n            <main>\n                <div>{currentQuestion}</div>\n                {/* {answerChoices.map(choice => {\n                    return (\n                    <div>{choice}</div>\n                    )\n                })} */}\n            </main>\n        </>\n    )\n\n};\n\nexport default Quiz;"],"mappings":"scAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CACxD,OAASC,WAAW,CAAEC,WAAW,KAAQ,kBAAkB,CAC3D,MAAOC,IAAG,KAAM,OAAO,CAAC,6IAExB,GAAMC,KAAI,CAAG,QAAPA,KAAI,CAAGC,KAAK,CAAI,CAClB,GAAMC,SAAQ,CAAGJ,WAAW,EAAE,CAC9B,GAAMK,WAAU,CAAGD,QAAQ,CAACE,KAAK,CAACD,UAAU,CAC5CE,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC,CAEvB,cAAwCT,QAAQ,CAAC,EAAE,CAAC,wCAA7Ca,YAAY,eAAEC,eAAe,eACpC;AACA,eAA8Bd,QAAQ,CAAC,CAAC,CAAC,yCAAlCe,OAAO,eAAEC,UAAU,eAC1B,eAA8ChB,QAAQ,CAAC,EAAE,CAAC,yCAAnDiB,eAAe,eAAEC,kBAAkB,eAC1C,eAA0ClB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,yCAApDmB,aAAa,eAAEC,gBAAgB,eACtC;AAEJ;AACI;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACInB,SAAS,CAAC,UAAM,CACZ,GAAMoB,KAAI,4FAAG,+KACqBhB,IAAG,CAACI,UAAU,CAAC,QAAvCa,eAAe,eACrBX,OAAO,CAACC,GAAG,CAACU,eAAe,CAAC,CAAC,gCACtBA,eAAe,wDACzB,kBAJKD,KAAI,0CAIT,CACD,GAAMC,gBAAe,CAAGD,IAAI,EAAE,CAC9BP,eAAe,CAACQ,eAAe,CAAC,CAChCX,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC,CACzB,MAAOA,aAAY,CAEvB,CAAC,CAAE,EAAE,CAAC,CAEV;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAMU,mBAAkB,CAAG,QAArBA,mBAAkB,EAAS,CAEjC,CAAC,CACD;AACA,GAAMC,WAAU,6FAAG,2KACRb,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC,0DACnC,kBAFKW,WAAU,2CAEf,CAED;AAEA,mBACI,wCACI,cAAW,cACX,mCACI,qBAAMP,eAAe,EAAO,EAMzB,GACR,CAGX,CAAC,CAED,cAAeX,KAAI"},"metadata":{},"sourceType":"module"}